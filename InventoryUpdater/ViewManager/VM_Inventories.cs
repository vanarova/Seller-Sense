using Decoders.Interfaces;
using SellerSense.Model;
using ssViewControls;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static SellerSense.ViewManager.VM_Products;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace SellerSense.ViewManager
{
    /// <summary>
    /// view manager for inventory form hierarchy, handles events and binding for all usercontrols in Inventories form
    /// </summary>
    internal class VM_Inventories
    {
        internal M_Inventories _m_inventoriesModel { get; set; }
        internal M_InvUpdate _m_invModel { get; set; }
        internal M_Product _m_productModel { get; set; }
        internal DataSet _invUpdateGridData { get; set; }
        private InvCntrl _v_invCntrl;
        private ssGridView<InventoryView> _ssGridView;
        private Action<Object, ListChangedEventArgs> _bindingListChanged;
        internal List<InventoryView> _inventoryViewList { get; set; }


        public VM_Inventories(M_Inventories inventories, M_Product m_product)
        {
            _m_inventoriesModel = inventories;
            _m_productModel = m_product;
            LoadInvSnapshotDataFromLastSavedMap();
            TranslateInvModelToInvView();
        }

        internal void AssignViewManager(ssGridView<InventoryView> ssGrid)
        {
            _ssGridView = ssGrid;
            HandlessGridViewControlEvents();
        }

        //Custom event, fires when grid control is loaded
        private void HandlessGridViewControlEvents()
        {//attach binding List changed events here
            _ssGridView.OnControlLoad += (gridview) => { DisengageCellEvents();  EngageCellEvents(); DisableColumnEditingForSomeColumns(gridview); };
        }

        private void DisableColumnEditingForSomeColumns(DataGridView gridview)
        {
            foreach (DataGridViewColumn column in gridview.Columns) { column.ReadOnly = true; }
            gridview.Columns[Constants.InventoryViewCols.AmazonCount].ReadOnly = false;
            gridview.Columns[Constants.InventoryViewCols.FlipkartCount].ReadOnly = false;
            gridview.Columns[Constants.InventoryViewCols.SnapdealCount].ReadOnly = false;
            gridview.Columns[Constants.InventoryViewCols.MeeshoCount].ReadOnly = false;
        }

        internal void AssignViewManager(InvCntrl invUserControl) {
            _v_invCntrl = invUserControl;
            HandleProductControlEvents();
        }

        /// <summary>
        /// Hendles events generated by product usecontrol, this is one level up from datagridview usercontrol.
        /// </summary>
        private void HandleProductControlEvents()
        {
            _v_invCntrl.importAmazonToolStripMenuItem.Click += (s, e) => {   ImportAmazonInv();  };
            _v_invCntrl.importFlipkartToolStripMenuItem.Click += (s, e) => {ImportFlipkartInv();  };
            _v_invCntrl.importSnapdealToolStripMenuItem.Click += (s, e) => { ImportSnapdealInv();  };
            _v_invCntrl.importMeeshoToolStripMenuItem.Click += (s, e) => { ImportMeeshoInv(); };
        }

        private void DisengageCellEvents()
        {
            _ssGridView.BindingListChanged -= _bindingListChanged;
        }

        //Events generated by bindinglist changed event, these events are coming from setter of class: InventoryView properties
        private void EngageCellEvents()
        {
           _bindingListChanged = (s, e) => {
               var list = s as BindingList<InventoryView>;
               //if (e!=null && e.PropertyDescriptor != null && e.PropertyDescriptor.Name == "AmazonCount") {
               //    string asin = list[e.NewIndex].AmazonCode;
               //    var invobj = _m_inventoriesModel._amzImportedInvList._amzInventoryList.FirstOrDefault(x => x.asin == asin);
               //    if (invobj != null)
               //    {
               //        AmzInventoryV1 iamz = new AmzInventoryV1(
               //            invobj.sku, 
               //            list[e.NewIndex].AmazonCode, 
               //            invobj.price, 
               //            list[e.NewIndex].AmazonSystemCount.ToString(), 
               //            list[e.NewIndex].AmazonCount.ToString());
               //        _m_inventoriesModel._amzImportedInvList._amzModifiedInventoryList.Add(iamz);
               //    }
               //}
               if (e != null && e.PropertyDescriptor != null && e.PropertyDescriptor.Name == Constants.InventoryViewCols.AmazonCount)
               {
                   string asin = list[e.NewIndex].AmazonCode;
                   var invobj = _m_inventoriesModel._amzImportedInvList._amzInventoryList.FirstOrDefault(x => x.asin == asin);
                   if (invobj != null)
                   {
                       AmzInventoryV1 iamz = new AmzInventoryV1(
                           invobj.sku,
                           list[e.NewIndex].AmazonCode,
                           invobj.price,
                           list[e.NewIndex].AmazonSystemCount.ToString(),
                           list[e.NewIndex].AmazonCount.ToString());
                       _m_inventoriesModel._amzImportedInvList._amzModifiedInventoryList.Add(iamz);
                   }
               }
               if (e != null && e.PropertyDescriptor != null && e.PropertyDescriptor.Name == Constants.InventoryViewCols.FlipkartCount)
               {
                   string asin = list[e.NewIndex].FlipkartCode;
                   var invobj = _m_inventoriesModel._fkImportedInventoryList._fkInventoryList.FirstOrDefault(x => x.fsn == asin);
                   if (invobj != null)
                   {
                       FkInventoryV2 iamz = new FkInventoryV2(
                           invobj.sku,
                           list[e.NewIndex].FlipkartCode,
                           invobj.price,
                           list[e.NewIndex].FlipkartSystemCount.ToString(),
                           list[e.NewIndex].FlipkartCount.ToString());
                       _m_inventoriesModel._fkImportedInventoryList._fkUIModifiedInvList.Add(iamz);
                   }
               }
               if (e != null && e.PropertyDescriptor != null && e.PropertyDescriptor.Name == Constants.InventoryViewCols.SnapdealCount)
               {
                   string asin = list[e.NewIndex].SnapdealCode;
                   var invobj = _m_inventoriesModel._spdImportedInventoryList._spdInventoryList.FirstOrDefault(x => x.fsn == asin);
                   if (invobj != null)
                   {
                       SpdInventoryV2 iamz = new SpdInventoryV2(
                           invobj.sku,
                           list[e.NewIndex].SnapdealCode,
                           invobj.price,
                           list[e.NewIndex].SnapdealSystemCount.ToString(),
                           list[e.NewIndex].SnapdealCount.ToString());
                       _m_inventoriesModel._spdImportedInventoryList._spdUIModifiedInvList.Add(iamz);
                   }
               }
               if (e != null && e.PropertyDescriptor != null && e.PropertyDescriptor.Name == Constants.InventoryViewCols.MeeshoCount)
               {
                   string asin = list[e.NewIndex].MeeshoCode;
                   var invobj = _m_inventoriesModel._msoImportedInventoryList._msoInventoryList.FirstOrDefault(x => x.fsn == asin);
                   if (invobj != null)
                   {
                       MsoInventoryV2 iamz = new MsoInventoryV2(
                           invobj.sku,
                           list[e.NewIndex].MeeshoCode,
                           invobj.price,
                           list[e.NewIndex].MeeshoSystemCount.ToString(),
                           list[e.NewIndex].MeeshoCount.ToString());
                       _m_inventoriesModel._msoImportedInventoryList._msoUIModifiedInvList.Add(iamz);
                   }
               }
           };
            _ssGridView.BindingListChanged += _bindingListChanged;
        }

        private async void ImportAmazonInv()
        {
            DisengageCellEvents();
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Amazon inv text file|*.txt";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
                _m_inventoriesModel.ImportAmazonInventoryFile(openFileDialog.FileName);
            else return;
            _ssGridView.IsLoading = true;
            await AssignAmazonInvAndPricesToInvView();
            _ssGridView.IsLoading = false;
            EngageCellEvents();
        }

        private async void ImportFlipkartInv()
        {
            DisengageCellEvents();
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Flipkart inv file|*.xls";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
                _m_inventoriesModel.ImportFlipkartInventoryFile(openFileDialog.FileName);
            else return;
            _ssGridView.IsLoading = true;
            await AssignFlipkartInvAndPricesToInvView();
            _ssGridView.IsLoading = false;
            EngageCellEvents() ;    
        }

        private async void ImportSnapdealInv()
        {
            DisengageCellEvents();
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Snapdeal inv file|*.xlsx";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
                _m_inventoriesModel.ImportSnapdealInventoryFile(openFileDialog.FileName);
            else return;
            _ssGridView.IsLoading = true;
            await AssignSnapdealInvAndPricesToInvView();
            _ssGridView.IsLoading = false;
            EngageCellEvents();
        }

        private async void ImportMeeshoInv()
        {
            DisengageCellEvents();
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Meesho inv file|*.xlsx";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
                _m_inventoriesModel.ImportMeeshoInventoryFile(openFileDialog.FileName);
            else return;
            _ssGridView.IsLoading = true;
            await AssignMeeshoInvAndPricesToInvView();
            _ssGridView.IsLoading = false;
            EngageCellEvents();
        }


        internal void AssignImagesToProducts(Dictionary<string, Image> imgs)
        {
            foreach (var item in _inventoryViewList)
            {
                if (imgs.ContainsKey(item.InHouseCode))
                    item.Image = imgs[item.InHouseCode];

            }
        }

        private Task AssignAmazonInvAndPricesToInvView()
        {
           return Task.Run(() =>
            {
                foreach (var amzItem in _m_inventoriesModel._amzImportedInvList._amzInventoryList)
                {
                    foreach (var viewItem in _inventoryViewList)
                    {
                        if (amzItem.asin == viewItem.AmazonCode && int.TryParse(amzItem.systemQuantity, out int val))
                        {
                            viewItem.AmazonSystemCount = val;
                            viewItem.AmazonCount = val;
                        }
                    }
                }
            });


        }

        private Task AssignFlipkartInvAndPricesToInvView()
        {
            return Task.Run(() =>
            {
                foreach (var fkItem in _m_inventoriesModel._fkImportedInventoryList._fkInventoryList)
                {
                    foreach (var viewItem in _inventoryViewList)
                    {
                        if (fkItem.fsn == viewItem.FlipkartCode && int.TryParse(fkItem.systemQuantity, out int val))
                        {
                            viewItem.FlipkartSystemCount = val;
                            viewItem.FlipkartCount = val;
                        }
                    }
                }
            });

        }

        private Task AssignSnapdealInvAndPricesToInvView()
        {
            return Task.Run(() =>
            {
                foreach (var spdItem in _m_inventoriesModel._spdImportedInventoryList._spdInventoryList)
                {
                    foreach (var viewItem in _inventoryViewList)
                    {
                        if (spdItem.fsn == viewItem.SnapdealCode && int.TryParse(spdItem.systemQuantity, out int val))
                        {
                            viewItem.SnapdealSystemCount = val;
                            viewItem.SnapdealCount = val;
                        }
                    }
                }
            });

        }

        private Task AssignMeeshoInvAndPricesToInvView()
        {
            return Task.Run(() =>
            {
                foreach (var msoItem in _m_inventoriesModel._msoImportedInventoryList._msoInventoryList)
                {
                    foreach (var viewItem in _inventoryViewList)
                    {
                        if (msoItem.fsn == viewItem.MeeshoCode && int.TryParse(msoItem.systemQuantity, out int val))
                        {
                            viewItem.MeeshoSystemCount = val;
                            viewItem.MeeshoCount = val;
                        }
                    }
                }
            });
        }


       
        internal bool LoadInvSnapshotDataFromLastSavedMap()
        {
            _m_productModel.LoadLastSavedMap();
            if (!string.IsNullOrWhiteSpace(_m_productModel._lastSavedMapFilePath))
                _m_invModel = new M_InvUpdate(_m_productModel);
            else return false;

            return true;
        }

          

        private void TranslateInvModelToInvView()
        {
            _inventoryViewList = new List<InventoryView>();
            foreach (var item in _m_productModel._productEntries)
            {
                _inventoryViewList.Add(new InventoryView() {
                    InHouseCode = item.InHouseCode,
                    Title = item.Title, Tag = item.Tag, Image = null, AmazonCode = item.AmazonCode, FlipkartCode=item.FlipkartCode,
                    MeeshoCode=item.MeeshoCode,SnapdealCode=item.SnapdealCode
                    });
            }
        }


        internal void SaveInvSnapshot()
        {

            _m_invModel.SaveInvSnapshot();
        }


        internal class InventoryView : INotifyPropertyChanged
        {
            private int? _amazonCount;
            private int? _flipkartCount;
            private int? _snapdealCount;
            private int? _meeshoCount;
            private int? _inhouseCount;
            private string _notes;

            //below values from Product 
            public string InHouseCode { get; set; }
            public Image Image { get; set; }
            public string Title { get; set; }
            public string Tag { get; set; }
            


        //below values fron InvUpdate
        public int? AmazonCount { 
                get { return _amazonCount; } 
                set { if (value != this._amazonCount) { _amazonCount = value; NotifyPropertyChanged(); } } 
            }
            public int? AmazonSystemCount { get; set; }
            public int? FlipkartCount
            {
                get { return _flipkartCount; }
                set { if (value != this._flipkartCount) { _flipkartCount = value; NotifyPropertyChanged(); } }
            }
            public int? FlipkartSystemCount { get; set; }
            public int? SnapdealCount
            {
                get { return _snapdealCount; }
                set { if (value != this._snapdealCount) { _snapdealCount = value; NotifyPropertyChanged(); } }
            }
            public int? SnapdealSystemCount { get; set; }
            public int? MeeshoCount
            {
                get { return _meeshoCount; }
                set { if (value != this._meeshoCount) { _meeshoCount = value; NotifyPropertyChanged(); } }
            }
            public int? MeeshoSystemCount { get; set; }
            public int? InHouseCount
            {
                get { return _inhouseCount; }
                set { if (value != this._inhouseCount) { _inhouseCount = value; NotifyPropertyChanged(); } }
            }
            public string Notes
            {
                get { return _notes; }
                set { if (value != this._notes) { _notes = value; NotifyPropertyChanged(); } }
            }

            //below values from Product
            public string AmazonCode { get; set; }
            public string FlipkartCode { get; set; }
            public string SnapdealCode { get; set; }
            public string MeeshoCode { get; set; }

            public event PropertyChangedEventHandler PropertyChanged;

            // This method is called by the Set accessor of each property.  
            // The CallerMemberName attribute that is applied to the optional propertyName  
            // parameter causes the property name of the caller to be substituted as an argument.  
            private void NotifyPropertyChanged([CallerMemberName] String propertyName = "")
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }

            //public string[] ModifiedFields { get; set; }
        }

    } 
}
